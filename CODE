package com.example.myservice;

import android.view.View;
import com.google.android.material.snackbar.Snackbar;
import com.google.android.material.navigation.NavigationView;

import androidx.navigation.NavController;
import androidx.navigation.Navigation;
import androidx.navigation.ui.AppBarConfiguration;
import androidx.navigation.ui.NavigationUI;
import androidx.drawerlayout.widget.DrawerLayout;
import androidx.appcompat.app.AppCompatActivity;

import java.util.List;
import java.util.Objects;
import java.util.List;
import java.util.ArrayList;
import mainActivityBinding;
import java.util.ArrayList;
import java.util.List;
import Com.Example.MyService.databinding.ActivityMainBinding;

import java.util.ArrayList;
import java.util.List;
 
public static

public class MainActivity extends AppCompatActivity {

    private AppBarConfiguration mAppBarConfiguration;
    private ActivityMainBinding binding;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
    
        binding = ActivityMainBinding.inflate(getLayoutInflater());
        setContentView(binding.getRoot());

        setSupportActionBar(binding.appBarMain.toolbar);
        binding.appBarMain.fab.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                Snackbar.make(view, "Replace with your own action", Snackbar.LENGTH_LONG)
                        .setAction("Action", null).show();
            }
        });

        DrawerLayout.drawer = binding;
        NavigationView.navigationView = binding;

        // Passing each menu ID as a set of Ids because each
        // menu should be considered as top level destinations.
        mAppBarConfiguration = new AppBarConfiguration.Builder(
                R.id.nav_home, R.id.nav_gallery, R.id.nav_slideshow)
                .setOpenableLayout(drawer)
                .build();

        NavController navController = Navigation.findNavController(this, R.id.nav_host_fragment_content_main);
        NavigationUI.setupActionBarWithNavController(this, navController, mAppBarConfiguration);
        NavigationUI.setupWithNavController(navigationView, navController);
    }

public class GeoLocationApp {
    private List<Service> services;
    private User user;
    
    public GeoLocationApp(User user) {
        this.user = user;
    }

    public GeoLocationApp() {
        services = new ArrayList<>();
        user = new User();
    }

    public void addService(Service service) {
        services.add(service);
    }

    public List<Service> findServicesNearby() {
        List<Service> nearbyServices = new ArrayList<>();
        for (Service service : services) {
            if (user.getLocation().isNearby(service.getLocation())) {
                nearbyServices.add(service);
            }
        }
        return nearbyServices;
    }

    public void updateUserLocation(Location location) {
        user.setLocation(location);
    }

    public void rateService(Service service, int rating) {
        service.addRating(rating);
    }

    public void leaveReview(Service service, String review) {
        service.addReview(review);
    }

    public void contactService(Service service) {
        // Implement communication with service provider
    }

    /**
     * @return the services
     */
    public List<Service> getServices() {
        return services;
    }

    /**
     * @param services the services to set
     */
    public void setServices(List<Service> services) {
        this.services = services;
    }

    /**
     * @return the user
     */
    public User getUser() {
        return user;
    }

    /**
     * @param user the user to set
     */
    public void setUser(User user) {
        this.user = user;
    }

    @Override
    public String toString() {
        return "GeoLocationApp [services=" + services + ", user=" + user + "]";
    }
}

class Service {
    private Location location;
    private List<Integer> ratings;
    private List<String> reviews;

    public Service(Location location) {
        this.location = location;
        ratings = new ArrayList<>();
        reviews = new ArrayList<>();
    }

    public Location getLocation() {
        return location;
    }

    public void addRating(int rating) {
        ratings.add(rating);
    }

    public double getAverageRating() {
        double sum = 0;
        for (int rating : ratings) {
            sum += rating;
        }
        return sum / ratings.size();
    }

    public void addReview(String review) {
        reviews.add(review);
    }

    public List<String> getReviews() {
        return reviews;
    }
}

class User {
    private Location location;

    public User() {
        location = new Location();
    }

    public void setLocation(Location location) {
        this.location = location;
    }

    public Location getLocation() {
        return location;
    }
}

class Location {
    private double latitude;
    private double longitude;

    public Location() {
    }

    public Location(double latitude, double longitude) {
        this.latitude = latitude;
        this.longitude = longitude;
    }

    public boolean isNearby(Location location) {
        // Implement distance calculation logic
        return true;
    }
}


public class MainActivity extends AppCompatActivity {

    private AppBarConfiguration mAppBarConfiguration;
    private ActivityMainBinding binding;

    @Override
   public boolean onCreateOptionsMenu(Menu menu) {
    // Inflate the menu; this adds items to the action bar if it is present.
    getMenuInflater().inflate(R.menu.main, menu);
    return true;
   }

    
        @Override
        public boolean onSupportNavigateUp() {
            NavController navController = Navigation.findNavController(this, R.id.nav_host_fragment_content_main);
            return NavigationUI.navigateUp(navController, mAppBarConfiguration)
                    || super.onSupportNavigateUp();
        }

    public AppBarConfiguration getmAppBarConfiguration() {
        return mAppBarConfiguration;
    }

    public void setmAppBarConfiguration(AppBarConfiguration mAppBarConfiguration) {
        this.mAppBarConfiguration = mAppBarConfiguration;
    }

    public ActivityMainBinding getBinding() {
        return binding;
    }

    public void setBinding(ActivityMainBinding binding) {
        this.binding = binding;
    }

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        binding = ActivityMainBinding.inflate(getLayoutInflater());
        setContentView(binding.getRoot());

        setSupportActionBar(binding.appBarMain.toolbar);
        binding.appBarMain.fab.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                Snackbar.make(view, "Replace with your own action", Snackbar.LENGTH_LONG)
                        .setAction("Action", null).show();
            }
        });
        DrawerLayout drawer = binding.drawerLayout;
        NavigationView navigationView = binding.navView;
        // Passing each menu ID as a set of Ids because each
        // menu should be considered as top level destinations.
        mAppBarConfiguration = new AppBarConfiguration.Builder(
                R.id.nav_home, R.id.nav_gallery, R.id.nav_slideshow)
                .setOpenableLayout(drawer)
                .build();
        NavController navController = Navigation.findNavController(this, R.id.nav_host_fragment_content_main);
        NavigationUI.setupActionBarWithNavController(this, navController, mAppBarConfiguration);
        NavigationUI.setupWithNavController(navigationView, navController);
    }


    /**
     * @param mAppBarConfiguration
     * @param binding
     */
    public MainActivity(com.example.myservice.AppBarConfiguration mAppBarConfiguration,
            com.example.myservice.ActivityMainBinding binding) {
        this.mAppBarConfiguration = mAppBarConfiguration;
        this.binding = binding;
    }


    @Override
    public String toString() {
        return super.toString();
    }




/**
 * @return the mAppBarConfiguration
 */
public AppBarConfiguration getmAppBarConfiguration() {
    return mAppBarConfiguration;
}


/**
 * @param mAppBarConfiguration the mAppBarConfiguration to set
 */
public void setmAppBarConfiguration(AppBarConfiguration mAppBarConfiguration) {
    this.mAppBarConfiguration = mAppBarConfiguration;
}


/**
 * @return the binding
 */
public ActivityMainBinding getBinding() {
    return binding;
}


/**
 * @param binding the binding to set
 */
public void setBinding(ActivityMainBinding binding) {
    this.binding = binding;
}    


/**
 * @return the mAppBarConfiguration
 */
public AppBarConfiguration getmAppBarConfiguration() {
    return mAppBarConfiguration;
}


/**
 * @return the binding
 */
public ActivityMainBinding getBinding() {
    return binding;
}




@Override
public int hashCode() {
    return Objects.hash(mAppBarConfiguration, binding);
}


@Override
public boolean equals(Object obj) {
    if (this == obj) {
        return true;
    }
    if (!(obj instanceof MainActivity)) {
        return false;
    }
    MainActivity other = (MainActivity) obj;
    return Objects.equals(mAppBarConfiguration, other.mAppBarConfiguration) && Objects.equals(binding, other.binding);
}    import java.util.ArrayList;
    import java.util.List;

    public class GeoLocationApp {
    
        private List<Service> services;
        private User user;

        public GeoLocationApp() {
            services = new ArrayList<>();
            user = new User();
        }
    
        public void addService(Service service) {
            services.add(service);
        }

        public List<Service> findServicesNearby() {
            List<Service> nearbyServices = new ArrayList<>();
            for (Service service : services) {
                if (user.getLocation().isNearby(service.getLocation())) {
                    nearbyServices.add(service);
                }
            }
            return nearbyServices;
        }
    
        public void updateUserLocation(Location location) {
            user.setLocation(location);
        }

        public void rateService(Service service, int rating) {
            service.addRating(rating);
        }

        public void leaveReview(Service service, String review) {
            service.addReview(review);
        }

        public void contactService(Service service) {
            // Implement communication with service provider
        }

        /**
         * @param services
         */
        public GeoLocationApp(List<Service> services) {
            this.services = services;
        }

        /**
         * @param user
         */
        public GeoLocationApp(User user) {
            this.user = user;
        }

        // Other methods for improving user experience and resolving issues
    }


class Service {

    private Location location;
    private List<Integer> ratings;
    private List<String> reviews;

    public Service(Location location) {
        this.location = location;
        ratings = new ArrayList<>();
        reviews = new ArrayList<>();
    }

    public Location getLocation() {
        return location;
    }

    public void addRating(int rating) {
        ratings.add(rating);
    }

    public double getAverageRating() {
        double sum = 0;
        for (int rating : ratings) {
            sum += rating;
        }
        return sum / ratings.size();
    }

    public void addReview(String review) {
        reviews.add(review);
    }

    public List<String> getReviews() {
        return reviews;
    }
}

class User {

    private Location location;

    public User() {
        location = new Location();
    }

    public void setLocation(Location location) {
        this.location = location;
    }

    public Location getLocation() {
        return location;
    }
}

class Location {

    private double latitude;
    private double longitude;

    public Location() {
    }

    public Location(double latitude, double longitude) {
        this.latitude = latitude;
        this.longitude = longitude;
    }

    public boolean isNearby(Location location) {
        // Implement distance calculation logic
        return true;
    }
}
interface MyService {
    // Métodos y definiciones de la interfaz
}


        import java.util.ArrayList;
        import java.util.List;

public class GeoLocationApp {

    private List<Service> services;
    private User user;

    public GeoLocationApp() {
        services = new ArrayList<>();
        user = new User();
    }

    public void addService(Service service) {
        services.add(service);
    }

    public List<Service> findServicesNearby() {
        List<Service> nearbyServices = new ArrayList<>();
        for (Service service : services) {
            if (user.getLocation().isNearby(service.getLocation())) {
                nearbyServices.add(service);
            }
        }
        return nearbyServices;
    }

    public void updateUserLocation(Location location) {
        user.setLocation (location);
    }

    public void rateService(Service service, int rating) {
        service.addRating(rating);
    }

    public void leaveReview(Service service, String review) {
        service.addReview(review);
    }

    public void contactService(Service service) {
        // Implement communication with service provider
    }

    // Other methods for improving user experience and resolving issues
}

interface Service {

    Location getLocation();

    void addRating(int rating);

    double getAverageRating();

    void addReview(String review);

    List<String> getReviews();
}

class ConcreteService implements Service {

    private Location location;
    private List<Integer> ratings;
    private List<String> reviews;

    public ConcreteService(Location location) {
        this.location = location;
        ratings = new ArrayList<>();
        reviews = new ArrayList<>();
    }

    @Override 
    public Location getLocation() {
        return location;
    }

    @Override 
    public void addRating(int rating) {
        ratings.add(rating);
    }

    @Override 
    public double getAverageRating() {
        double sum = 0;
        for (int rating : ratings) {
            sum += rating;
        }
        return sum / ratings.size();
    }

    @Override
    public void addReview(String review) {
        reviews.add(review);
    }

    @Override
    public List<String> getReviews() {
        return reviews;
    }
}

public class User {

    public class Location {
        public Location getLocation() {
            return location;
        }
    }

    private Location location;

    public User() {
        location = new Location();
    }

    public void setLocation(Location location) {
        this.location = location;
    }
}

class Location {
public public static void location() {
    
}
    private double latitude;
    private double longitude;

    public Location() {
    }

    public Location(double latitude, double longitude) {
        this.latitude = latitude;
        this.longitude = longitude;
    }

    public boolean isNearby (Location location) {
        // Implement distance calculation logic
        return true;
    }
}

